jdbc-default {
	host = "localhost"
	database = "postgres"
	schema = "public"
	port = 25432
	user = "postgres"
	password = "changeme"
}

akka {
	loglevel = DEBUG
	log-dead-letters-during-shutdown = on
	log-dead-letters = on
	actor {
		serialize-messages = off
		debug {
			receive = on // log all messages sent to an actor if that actors receive method is a LoggingReceive
			autoreceive = on // log all special messages like Kill, PoisoffPill etc sent to all actors
			lifecycle = on // log all actor lifecycle events of all actors
			fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
			event-stream = on // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
		}
		provider = cluster
		serializers {
			proto = "akka.remote.serialization.ProtobufSerializer"
			cmdSerializer = "com.namely.chiefofstate.CommandSerializer"
		}
		serialization-bindings {
			# state is serialized using protobuf
			"scalapb.GeneratedMessage" = proto
			"com.namely.chiefofstate.AggregateCommand" = cmdSerializer
		}

		# This will stop the guardian actor in case of any exception which will therefore
		# shutdown the whole actor system
		guardian-supervisor-strategy = "akka.actor.StoppingSupervisorStrategy"
	}

	persistence {
		# akka persistence jdbc
		journal.plugin = "jdbc-journal"
		snapshot-store.plugin = "jdbc-snapshot-store"
	}

	cluster {
		sharding {
			number-of-shards = 9
			passivate-idle-entity-after = 120s
		}
		# Documentation: https://doc.akka.io/docs/akka/current/split-brain-resolver.html#split-brain-resolver
		downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
		split-brain-resolver {
			active-strategy = keep-majority
			stable-after = 20s
			down-all-when-unstable = on
		}
		shutdown-after-unsuccessful-join-seed-nodes = 20s
	}

	coordinated-shutdown {
		terminate-actor-system = on
		exit-jvm = on
		run-by-actor-system-terminate = on
		run-by-jvm-shutdown-hook = on
	}

	projection {
		slick {
			profile = "slick.jdbc.PostgresProfile$"
			# add here your Slick db settings
			db {
				driver = "org.postgresql.Driver"
				# default to the journal jdbc settings, but allow optional overrides
				user = ${jdbc-default.user}
				password = ${jdbc-default.password}
				serverName = ${jdbc-default.host}
				portNumber = ${jdbc-default.port}
				databaseName = ${jdbc-default.database}
				url = "jdbc:postgresql://"${akka.projection.slick.db.serverName}":"${akka.projection.slick.db.portNumber}"/"${akka.projection.slick.db.databaseName}"?currentSchema="${akka.projection.slick.offset-store.schema}
				connectionPool = "HikariCP"
				keepAliveConnection = true
			}

			offset-store {
				# set this to your database schema if applicable, empty by default
				schema = ${jdbc-default.schema}
				# the database table name for the offset store
				table = "read_side_offsets"
				# check migration note https://github.com/akka/akka-projection/releases/tag/v1.1.0
				# set this to true this when migration tool is done
				use-lowercase-schema = false
			}
		}

		restart-backoff {
			min-backoff = 3s
			max-backoff = 30s
			random-factor = 0.2

			# -1 will not cap the amount of restarts
			# 0 will disable restarts
			max-restarts = -1
		}
	}
}

write-side-slick {
	profile = "slick.jdbc.PostgresProfile$"
	db {
		connectionPool = disabled
		driver = "org.postgresql.Driver"
		user = ${jdbc-default.user}
		password = ${jdbc-default.password}
		serverName = ${jdbc-default.host}
		portNumber = ${jdbc-default.port}
		databaseName = ${jdbc-default.database}
		schemaName = ${jdbc-default.schema}
		url = "jdbc:postgresql://"${write-side-slick.db.serverName}":"${write-side-slick.db.portNumber}"/"${write-side-slick.db.databaseName}"?currentSchema="${jdbc-default.schema}
	}
}

jdbc-journal {
	tables {
		# Only used in pre 5.0.0 for backward-compatibility
		# ref: https://github.com/akka/akka-persistence-jdbc/blob/v5.0.0/core/src/main/resources/reference.conf
		legacy_journal {
			tableName = "journal"
			schemaName = ${jdbc-default.schema}
		}

		# this is the new going forward
		# ref: https://github.com/akka/akka-persistence-jdbc/blob/v5.0.0/core/src/main/resources/reference.conf
		event_journal {
			tableName = "event_journal"
			schemaName = ${jdbc-default.schema}
		}

		event_tag {
			tableName = "event_tag"
			schemaName = ${jdbc-default.schema}
		}
	}
	slick = ${write-side-slick}
}
# the akka-persistence-query provider in use
jdbc-read-journal {
	# New events are retrieved (polled) with this interval.
	refresh-interval = "1s"
	# How many events to fetch in one query (replay) and keep buffered until they
	# are delivered downstreams.
	max-buffer-size = "500"
	tables {
		legacy_journal = ${jdbc-journal.tables.legacy_journal}
		event_journal = ${jdbc-journal.tables.event_journal}
		event_tag = ${jdbc-journal.tables.event_tag}
	}
	slick = ${write-side-slick}
}
# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
	tables {
		# Only used in pre 5.0.0 for backward-compatibility
		# ref: https://github.com/akka/akka-persistence-jdbc/blob/v5.0.0/core/src/main/resources/reference.conf
		legacy_snapshot {
			tableName = "snapshot"
			schemaName = ${jdbc-default.schema}
		}

		# This is the new configuration going forward
		snapshot {
			tableName = "snapshot"
			schemaName = ${jdbc-default.schema}
		}
	}
	slick = ${write-side-slick}
}

prometheus {
	# set the route and port for prometheus to scrape
	route = "metrics"
	port = "9102"
}
