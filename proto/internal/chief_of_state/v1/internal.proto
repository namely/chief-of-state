syntax = "proto3";

package chief_of_state.v1;

option java_package = "com.namely.protobuf.chiefofstate.v1";
option java_multiple_files = true;
option java_outer_classname = "CosInternalProto";

import "google/protobuf/any.proto";
import "chief_of_state/v1/persistence.proto";
import "google/rpc/status.proto";

// THESE ARE INTERNAL MESSAGES FOR THE COS SERVICE

// SendCommand is the type of commands received by the
// AggregateRoot(aka persistence entity to handle)
// There are internally used
message SendCommand {
  oneof type {
    RemoteCommand remote_command = 1;
    GetStateCommand get_state_command = 2;
  }
}

// a wrapper message for forwarding headers to the remote writeside handler
message RemoteCommand {
  // a helper messsage for gRPC metadata
  message Header {
    string key = 1;

    oneof value {
      string stringValue = 2;
      bytes bytesValue = 3;
    };
  }

  // the entity id
  string entity_id = 1;

  // the message to send
  google.protobuf.Any command = 2;

  // the grpc headers/metadata
  repeated Header headers = 3;
}

// GetStateCommand returns the current state of a
// persistence entity
message GetStateCommand {
  // the entity unique id
  string entity_id = 1;
}

//  Helper protobuf for serializing the command and akka actor reference
//    during command serde between actors. This is needed to design lagom
//    commands with proto, since the actorRef is not a proto-serializable
//    type by default. During serialization, the AggregateCommand case class
//    is converted into this protobuf and sent between actors as a
//    bytearray
//
message CommandWrapper {
  // the actual command
  google.protobuf.Any command = 1;
  // the actor ref
  bytes actor_ref = 2;
  // additional data to be added to the state meta
  map<string, google.protobuf.Any> data = 3;
}

// For returning a command reply whether it is successful or failed
// This is used internally by lagom-pb
message CommandReply {
  // the actual command reply
  oneof reply {
    // actual state is wrapped with meta data
    StateWrapper state = 1;
    // gRPC failure
    google.rpc.Status error = 2;
  }
}
