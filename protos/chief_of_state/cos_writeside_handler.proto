syntax = "proto3";

package chief_of_state;

option java_package = "com.namely.protobuf.chief_of_state";
option java_multiple_files = true;
option java_outer_classname = "CosWriteSideHandlerProto";
option go_package = "chief_of_state";
option csharp_namespace = "Namely.ChiefOfStateService.Grpc";

import "google/protobuf/any.proto";
import "cos_common.proto";

// Defines the interface that will be implemented by any application that
// wants to keeps its events and state with ChiefOfState. So an application will
// implement the gRPC server while ChiefOfState will make use the client side to interact.
service WriteSideHandlerService {
    // Processes every command sent by ChiefOfState and return either a response
    // containing an event to persist or a simple reply.
    rpc HandleCommand (HandleCommandRequest) returns (HandleCommandResponse);
    // Processes every event sent by ChiefOfState by applying the event to the
    // current state to return a new state.
    rpc HandleEvent (HandleEventRequest) returns (HandleEventResponse);
}

// HandleCommandRequest
message HandleCommandRequest {
    // the command to handle
    google.protobuf.Any command = 1;
    // the aggregate state at the moment of handling the command. This is the state
    // before the command being handled.
    google.protobuf.Any current_state = 2;
    // additional meta data.
    MetaData meta = 3;
}

// HandleCommandResponse
message HandleCommandResponse {
    oneof response_type {
        // With this response type an event is persisted before
        // a reply is sent back to the caller. The reply message that is sent after
        // the event is persisted contains the resulting state after the event is handled
        PersistAndReply persist_and_reply = 1;
        // With this response the current state is sent back to the caller.
        // This type of response is very useful to read-only requests that do not need
        // a read side query.
        Reply reply = 2;
    };
}
// Reply results in current state to be returned
message Reply {
}

// PersistAndReply contains the event to persist
message PersistAndReply {
    // event to persist
    google.protobuf.Any event = 1;
}

// HandleEventRequest
message HandleEventRequest {
    // the event to handle
    google.protobuf.Any event = 1;
    // the state before the event is being handled.
    google.protobuf.Any current_state = 2;
    // additional meta data
    MetaData meta = 3;
}

// HandleEventResponse contains the resulting state
// after the event has been handled
message HandleEventResponse {
    // resulting state after the event has been handled
    google.protobuf.Any resulting_state = 1;
}
