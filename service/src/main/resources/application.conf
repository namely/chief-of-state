include "lagompb.conf"
play {
	modules.enabled += "com.namely.protobuf.chief_of_state.AkkaGrpcClientModule"
	application {
		loader = com.namely.chiefofstate.ApplicationLoader
	}
	http {
		secret.key = "ahshrefhefjhefeboefvfvofefevelvenv"
		secret.key = ${?APPLICATION_SECRET}
	}
	server {
		provider = "play.core.server.AkkaHttpServerProvider"
		pidfile {
			path = /dev/null
		}
		http {
			# The default address is all address in case the environment variable PLAY_HTTP_ADDRESS and
			# properties file entry http.address are not found
			address = "0.0.0.0"
			address = ${?COS_ADDRESS}

			# The default port will be 9000 in case the environment variable PLAY_HTTP_PORT and properties
			# entry http.port are not found
			port = 9000
			port = ${?COS_PORT}

			# The idle timeout for an open connection after which it will be closed
			# Set to null or "infinite" to disable the timeout, but notice that this
			# is not encouraged since timeout are important mechanisms to protect your
			# servers from malicious attacks or programming mistakes.
			idleTimeout = 75 seconds
		}
	}
}

db {
	default {
		driver = "org.postgresql.Driver"
		username = "postgres"
		password = "changeme"
		username = ${?COS_POSTGRES_USER}
		password = ${?COS_POSTGRES_PASSWORD}
		host = "localhost"
		host = ${?COS_POSTGRES_HOST}
		port = "5432"
		port = ${?COS_POSTGRES_PORT}
		database = "postgres"
		database = ${?COS_POSTGRES_DB}
		schema = "public"
		schema = ${?COS_POSTGRES_SCHEMA}
		url = "jdbc:postgresql://"${db.default.host}":"${db.default.port}"/"${db.default.database}"?currentSchema="${db.default.schema}
	}
}

lagom {

	cluster {
		# exit jvm on actor system termination
		# this will allow Kubernetes to restart the pod
		exit-jvm-when-system-terminated = on
		bootstrap {
			enabled = on
		}
	}

	broker {
		kafka {
			brokers = "localhost:9092"
			brokers = ${?COS_KAFKA_BROKER}
			# disable kafka-native
			service-name = ""
		}
	}
}

akka {
	kafka {
		producer {
			kafka-clients {
				bootstrap.servers = "localhost:9092"
				bootstrap.servers = ${?COS_KAFKA_BROKER}
				security.protocol = PLAINTEXT
			}
		}
	}

	grpc {
		client {
			"chief_of_state.WriteSideHandlerService" {
				# Host to use if service-discovery-mechanism is set to static or grpc-dns
				host = ${WRITE_SIDE_HANDLER_SERVICE_HOST}

				# port to use if service-discovery-mechism is static or service discovery does not return a port
				port = ${WRITE_SIDE_HANDLER_SERVICE_PORT}

				service-discovery {
					mechanism = "static"
					# Service name to use if a service-discovery.mechanism other than static or grpc-dns
					service-name = ""
					# See https://doc.akka.io/docs/akka-management/current/discovery/index.html for meanings for each mechanism
					# if blank then not passed to the lookup
					port-name = ""
					protocol = ""

					# timeout for service discovery resolving
					resolve-timeout = 1s
				}

				# pick_first or round_robin
				grpc-load-balancing = ""

				deadline = infinite
				override-authority = ""
				user-agent = ""
				# Pulls default configuration from ssl-config-core's reference.conf
				ssl-config = ${ssl-config}
				use-tls = false

				creation {
					# How many times to retry client creation before giving up
					attempts = 1000

					# How long to wait between client creation attempts
					delay = 400ms
				}

				connection-attempts = -1
			}
			"chief_of_state.ReadSideHandlerService" {
				service-discovery {
					mechanism = "static"
					# Service name to use if a service-discovery.mechanism other than static or grpc-dns
					service-name = ""
					# See https://doc.akka.io/docs/akka-management/current/discovery/index.html for meanings for each mechanism
					# if blank then not passed to the lookup
					port-name = ""
					protocol = ""

					# timeout for service discovery resolving
					resolve-timeout = 1s
				}

				# pick_first or round_robin
				grpc-load-balancing = ""

				deadline = infinite
				override-authority = ""
				user-agent = ""
				# Pulls default configuration from ssl-config-core's reference.conf
				ssl-config = ${ssl-config}
				use-tls = false

				creation {
					# How many times to retry client creation before giving up
					attempts = 1000

					# How long to wait between client creation attempts
					delay = 400ms
				}

				connection-attempts = -1
			}
		}
	}

	projection {
		slick {
			# The Slick profile to use
			# set to one of: slick.jdbc.DerbyProfile$, slick.jdbc.H2Profile$, slick.jdbc.HsqldbProfile$, slick.jdbc.MySQLProfile$,
			#                slick.jdbc.PostgresProfile$, slick.jdbc.SQLiteProfile$, slick.jdbc.OracleProfile$
			#profile = <fill this with your profile of choice>
			profile = "slick.jdbc.PostgresProfile$"
			# add here your Slick db settings
			db {
				driver = "org.postgresql.Driver"
				user = "postgres"
				user = ${?COS_READ_SIDE_OFFSET_DB_USER}
				password = "changeme"
				password = ${?COS_READ_SIDE_OFFSET_DB_PASSWORD}
				serverName = "localhost"
				serverName = ${?COS_READ_SIDE_OFFSET_DB_HOST}
				portNumber = 5432
				portNumber = ${?COS_READ_SIDE_OFFSET_DB_PORT}
				databaseName = "postgres"
				databaseName = ${?COS_READ_SIDE_OFFSET_DB}
				schema = "public"
				schema = ${?COS_READ_SIDE_OFFSET_DB_SCHEMA}
				url = "jdbc:postgresql://"${akka.projection.slick.db.serverName}":"${akka.projection.slick.db.portNumber}"/"${akka.projection.slick.db.databaseName}"?currentSchema="${akka.projection.slick.db.schema}
				connectionPool = "HikariCP"
				keepAliveConnection = true
			}
		}
		restart-backoff {
			min-backoff = 3s
			max-backoff = 30s
			random-factor = 0.2

			# -1 will not cap the amount of restarts
			# 0 will disable restarts
			max-restarts = -1
		}
	}
}


lagompb {
	service-name = "chiefofstate"
	service-name = ${?COS_SERVICE_NAME}

	# Protocol buffers package name to allow lagompb to
	# automatically build a descriptor registry
	protos-package = "com.namely.protobuf"

	# Ask timeout is required to
	# send commands to the aggregate root and receive response
	# the unit value is in second
	ask-timeout = 5

	snapshot-criteria {
		# number of events to batch persist
		frequency = 100
		frequency = ${?COS_EVENTS_BATCH_THRESHOLD}
		# number of snapshots to retain
		retention = 2
		retention = ${?COS_NUM_SNAPSHOTS_TO_RETAIN}
	}

	events {
		# the events tag name. It is recommended to use the service name
		# because the event tag name must be unique and cannot be changed once the application has handled
		# an aggregate event.
		# Reference: https://www.lagomframework.com/documentation/latest/scala/ReadSide.html#Refactoring-Consideration
		tagname: "chiefofstate"
	}
}


chief-of-state {

	# Helps switch on/off the readSide model
	read-model {
		# helps turn on/off the readside processor
		enabled = false
		enabled = ${?COS_READ_SIDE_ENABLED}
	}

	# define settings for the handler services
	handlers-settings {
		enable-settings = ${HANDLER_SERVICE_ENABLE_PROTO_VALIDATION}
		# define the fully qualified type url  of the state proto
		# example: namely.org_units.OrgUnit
		states-proto = ${HANDLER_SERVICE_STATES_PROTOS}
		# list if the fully qualified type url  of the events handled
		# example: "namely.org_units.OrgUnitTypeCreated", "namely.org_units.OrgUnitTypeUpdated"
		events-protos = ${HANDLER_SERVICE_EVENTS_PROTOS}
	}

	encryption {
		# lagom-pb ProtoEncryption used for lagom-pb event/snapshot adapters
		# must implement io.superflat.lagompb.encryption.ProtoEncryption
		# or leave as empty string if no encryption desired
		encryption-class = ""
		encryption-class = ${?COS_ENCRYPTION_CLASS}
	}
}
