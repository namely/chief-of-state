#
# Set the application loader
play {
  modules.enabled += "com.namely.protobuf.chief_of_state.AkkaGrpcClientModule"
  application {
    loader = com.namely.chiefofstate.SidecarApplicationLoader
  }
}

db {
  default {
    driver = "org.postgresql.Driver"
    username = "postgres"
    password = "changeme"
    username = ${?POSTGRES_USER}
    password = ${?POSTGRES_PASSWORD}
    host = "localhost"
    host = ${?POSTGRES_HOST}
    url =  "jdbc:postgresql://"${db.default.host}":5432/postgres"
  }
}

# Defaults to use for each Akka persistence plugin
jdbc-defaults.slick {

  # The Slick profile to use
  # set to one of: slick.jdbc.PostgresProfile$, slick.jdbc.MySQLProfile$, slick.jdbc.OracleProfile$ or slick.jdbc.H2Profile$
  profile = "slick.jdbc.PostgresProfile$"
}

lagom {
  persistence {
    jdbc {
      create-tables {
        auto = true
      }
    }
  }
}

akka {
  persistence {
    journal {
      plugin = "jdbc-journal"
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
    }
  }

  grpc {
    client {
      "chief_of_state.HandlerService" {
        # Host to use if service-discovery-mechanism is set to static or grpc-dns
        host = "localhost"

        service-discovery {
          mechanism = "static"
          # Service name to use if a service-discovery.mechanism other than static or grpc-dns
          service-name = ""
          # See https://doc.akka.io/docs/akka-management/current/discovery/index.html for meanings for each mechanism
          # if blank then not passed to the lookup
          port-name = "https"
          protocol = "tcp"

          # timeout for service discovery resolving
          resolve-timeout = 1s
        }

        # port to use if service-discovery-mechism is static or service discovery does not return a port
        port = 8080

        # pick_first or round_robin
        # TODO: test more policies, add support by using io.grpc.internal.AbstractManagedChannelImplBuilder.defaultServiceConfig
        grpc-load-balancing = ""

        deadline = infinite
        override-authority = ""
        user-agent = ""
        # Pulls default configuration from ssl-config-core's reference.conf
        ssl-config = ${ssl-config}
        use-tls = true

        # TODO: Enforce HTTP/2 TLS restrictions: https://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-9.2

        creation {
          # How many times to retry client creation before giving up
          attempts = 1000

          # How long to wait between client creation attempts
          delay = 400ms
        }

        connection-attempts = -1

      # Service discovery mechamism to use. The default is to use a static host
      # and port that will be resolved via DNS.
      # Any of the mechanisms described in https://doc.akka.io/docs/akka-management/current/discovery/index.html can be used
      # including Kubernetes, Consul, AWS API
      }
    }
  }
}

namely {
  service-name = "chiefofstate.service"
  service-name = ${?SERVICE_NAME}
  team = ""
  team = ${?TEAM_NAME}
}

lagom-common {
  snaphsot-criteria {
    # number of events to batch persist
    frequency = 2
    # number of snapshots to retain
    retention = 2
  }

  events {
    # the events tag name. It is recommended to use the service name
    # because the event tag name must be unique and cannot be changed once the application has handled
    # an aggregate event.
    # Reference: https://www.lagomframework.com/documentation/latest/scala/ReadSide.html#Refactoring-Consideration
    tagname: ${namely.service-name}
  }
}
